name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            host: linux
            arch: linux_gcc_64
          - os: macos-latest
            host: mac
            arch: clang_64
          - os: windows-latest
            host: windows
            arch: win64_msvc2022_64
    runs-on: ${{ matrix.os }}

    env:
      BUILD_DIR: build
      CMAKE_BUILD_TYPE: Release
      QT_VER: 6.8.3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      # Python pour le petit script de d√©tection des modules (aqt list-qt)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Discover available Qt modules
        id: detect
        run: |
          python -m pip install --upgrade aqtinstall
          python - << 'PY'
          import os, subprocess, sys
          host = "${{ matrix.host }}"
          arch = "${{ matrix.arch }}"
          ver  = os.environ["QT_VER"]

          def listmods():
              try:
                  out = subprocess.check_output(
                      [sys.executable, "-m", "aqt", "list-qt", host, "desktop", "--modules", ver, arch],
                      text=True
                  )
                  return {line.strip() for line in out.splitlines() if line.strip()}
              except Exception as e:
                  print("Module listing failed:", e, file=sys.stderr)
                  return set()

          mods = listmods()
          wanted = []
          for cand in ("qtquickcontrols2", "qtquickcontrols"):
              if cand in mods:
                  wanted.append(cand)
                  break
          if "qt5compat" in mods:
              wanted.append("qt5compat")

          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"modules={' '.join(wanted)}\n")
          print("Detected modules:", ' '.join(wanted) or "(none)")
          PY

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VER }}
          target: desktop
          host:   ${{ matrix.host }}
          arch:   ${{ matrix.arch }}
          modules: ${{ steps.detect.outputs.modules }}
          cache: true

      - name: Debug Qt
        run: |
          echo "QTDIR=$QTDIR"
          which qmake || true
          qmake -v || true

      - name: Configure (CMake + Ninja)
        run: cmake -S Blockchain_desktop_PDG -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}

      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --parallel

      - name: CTest
        run: ctest --test-dir ${{ env.BUILD_DIR }} --output-on-failure

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ runner.os }}
          path: |
            ${{ env.BUILD_DIR }}/appBlockchain_desktop_PDG
            ${{ env.BUILD_DIR }}/appBlockchain_desktop_PDG.exe
            ${{ env.BUILD_DIR }}/appBlockchain_desktop_PDG.app
          if-no-files-found: ignore

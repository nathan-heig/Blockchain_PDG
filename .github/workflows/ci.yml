name: CI
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            host: linux
            arch: linux_gcc_64
          - os: macos-latest
            host: mac
            arch: clang_64
          - os: windows-latest
            host: windows
            arch: win64_msvc2022_64
    runs-on: ${{ matrix.os }}
    env:
      BUILD_DIR: build
      CMAKE_BUILD_TYPE: Release
      QT_VER: 6.8.3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Ninja (all OS)
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install aqtinstall
        run: python -m pip install --upgrade aqtinstall

      - name: Discover available Qt modules
        id: detect
        shell: python
        run: |
          import os, subprocess, sys
          host = "${{ matrix.host }}"
          arch = "${{ matrix.arch }}"
          ver  = os.environ["QT_VER"]
          def listmods():
              try:
                  out = subprocess.check_output(
                      [sys.executable, "-m", "aqt", "list-qt", host, "desktop", "--modules", ver, arch],
                      text=True
                  )
                  mods = set()
                  for line in out.splitlines():
                      line = line.strip()
                      if line and not line.startswith("WARNING"):
                          mods.add(line.lower())
                  return mods
              except Exception as e:
                  print("Module listing failed:", e, file=sys.stderr)
                  return set()
          mods = listmods()
          print(f"Available modules: {mods}", file=sys.stderr)

          wanted = []
          for cand in ("qtquickcontrols2", "qtquickcontrols"):
              if cand in mods:
                  wanted.append(cand); break
          if "qt5compat" in mods:
              wanted.append("qt5compat")
          else:
              print("Warning: qt5compat not found in module list, adding it anyway", file=sys.stderr)
              wanted.append("qt5compat")
          for mod in ["qtcharts", "qtnetworkauth", "qtwebsockets"]:
              if mod in mods:
                  wanted.append(mod)

          modules_str = ' '.join(wanted)
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"modules={modules_str}\n")
          print(f"Selected modules: {modules_str or '(none)'}")

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VER }}
          target: desktop
          host:   ${{ matrix.host }}
          arch:   ${{ matrix.arch }}
          modules: ${{ steps.detect.outputs.modules }}
          cache: true

      # ===== vcpkg =====
      - name: Setup vcpkg
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            git clone https://github.com/Microsoft/vcpkg.git
            cd vcpkg
            ./bootstrap-vcpkg.bat
            echo "VCPKG_ROOT=$PWD" >> $GITHUB_ENV
            echo "$PWD" >> $GITHUB_PATH
          elif [ "${{ runner.os }}" = "macOS" ]; then
            git clone https://github.com/Microsoft/vcpkg.git
            cd vcpkg
            ./bootstrap-vcpkg.sh
            echo "VCPKG_ROOT=$PWD" >> $GITHUB_ENV
            echo "$PWD" >> $GITHUB_PATH
          else
            git clone https://github.com/Microsoft/vcpkg.git
            cd vcpkg
            ./bootstrap-vcpkg.sh
            echo "VCPKG_ROOT=$PWD" >> $GITHUB_ENV
            echo "$PWD" >> $GITHUB_PATH
          fi

      - name: Install vcpkg dependencies
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            triplet="x64-windows"
          elif [ "${{ runner.os }}" = "macOS" ]; then
            triplet="x64-osx"
          else
            triplet="x64-linux"
          fi
          echo "VCPKG_DEFAULT_TRIPLET=$triplet" >> $GITHUB_ENV
          
          cd vcpkg
          ./vcpkg install --triplet $triplet

      # ===== Configure / Build =====
      - name: Configure (CMake + Ninja)
        shell: bash
        run: |
            cmake \
            -S Blockchain_desktop_PDG -B ${{ env.BUILD_DIR }} -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DCMAKE_PREFIX_PATH="$QTDIR" \
            -DUSE_SYSTEM_MINIUPNPC=OFF \
            -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
            ${{ runner.os == 'macOS' && '-DCMAKE_OSX_ARCHITECTURES=x86_64' || '' }}

      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --parallel

      - name: CTest
        run: ctest --test-dir ${{ env.BUILD_DIR }} --output-on-failure

      # ===== Deploy Qt Dependencies (Windows) =====
      - name: Deploy Qt (Windows)
        if: runner.os == 'Windows'
        run: |
          $windeployqt = where.exe windeployqt 2>$null | Select-Object -First 1
          if (-not $windeployqt) { $windeployqt = "$env:QTDIR\bin\windeployqt.exe" }
          $deployDir = "${{ env.BUILD_DIR }}\deploy"
          New-Item -ItemType Directory -Force -Path $deployDir | Out-Null
          Copy-Item "${{ env.BUILD_DIR }}\appBlockchain_desktop_PDG.exe" -Destination $deployDir
          & $windeployqt --release --qmldir "Blockchain_desktop_PDG" "$deployDir\appBlockchain_desktop_PDG.exe"
        shell: pwsh

      # ===== Deploy Qt Dependencies + DMG (macOS) =====
      - name: Deploy Qt (macOS)
        if: runner.os == 'macOS'
        run: |
          macdeployqt=$(which macdeployqt || echo "$QTDIR/bin/macdeployqt")
          "$macdeployqt" "${{ env.BUILD_DIR }}/appBlockchain_desktop_PDG.app" -dmg -verbose=2 -always-overwrite
        shell: bash

      # ===== Package AppImage (Linux) =====
      - name: Package AppImage (Linux)
        if: runner.os == 'Linux'
        run: |
          APPDIR=AppDir
          mkdir -p $APPDIR/usr/bin
          mkdir -p $APPDIR/usr/share/applications

          cp ${{ env.BUILD_DIR }}/appBlockchain_desktop_PDG $APPDIR/usr/bin/

          cat > $APPDIR/usr/share/applications/appBlockchain_desktop_PDG.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=Blockchain Desktop PDG
          Exec=appBlockchain_desktop_PDG
          Categories=Utility;
          EOF

          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-*.AppImage

          ./linuxdeploy-x86_64.AppImage --appdir $APPDIR \
            -e $APPDIR/usr/bin/appBlockchain_desktop_PDG \
            -d $APPDIR/usr/share/applications/appBlockchain_desktop_PDG.desktop \
            --plugin qt --output appimage

      # ===== Upload artifacts =====
      - name: Upload artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ runner.os }}
          path: ${{ env.BUILD_DIR }}/deploy/
          if-no-files-found: error

      - name: Upload artifact (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ runner.os }}
          path: ${{ env.BUILD_DIR }}/*.dmg
          if-no-files-found: error

      - name: Upload artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: appimage-linux
          path: ./*.AppImage
          if-no-files-found: error

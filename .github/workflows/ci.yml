name: CI
on:
  push:
  pull_request:
  workflow_dispatch:
jobs:
  build-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            host: linux
            arch: linux_gcc_64
          - os: macos-latest
            host: mac
            arch: clang_64
          - os: windows-latest
            host: windows
            arch: win64_msvc2022_64
    runs-on: ${{ matrix.os }}
    env:
      BUILD_DIR: build
      CMAKE_BUILD_TYPE: Release
      QT_VER: 6.8.3
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      # Python pour le petit script de détection des modules (aqt list-qt)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install aqtinstall
        run: python -m pip install --upgrade aqtinstall
      - name: Discover available Qt modules
        id: detect
        shell: python
        run: |
          import os, subprocess, sys
          host = "${{ matrix.host }}"
          arch = "${{ matrix.arch }}"
          ver  = os.environ["QT_VER"]
          def listmods():
              try:
                  out = subprocess.check_output(
                      [sys.executable, "-m", "aqt", "list-qt", host, "desktop", "--modules", ver, arch],
                      text=True
                  )
                  # Nettoyer et filtrer les lignes
                  mods = set()
                  for line in out.splitlines():
                      line = line.strip()
                      if line and not line.startswith("WARNING"):
                          mods.add(line.lower())  # Normaliser en minuscules
                  return mods
              except Exception as e:
                  print("Module listing failed:", e, file=sys.stderr)
                  return set()
          mods = listmods()
          print(f"Available modules: {mods}", file=sys.stderr)

          wanted = []

          # Chercher QtQuickControls2 ou QtQuickControls
          for cand in ("qtquickcontrols2", "qtquickcontrols"):
              if cand in mods:
                  wanted.append(cand)
                  break

          # IMPORTANT: Toujours inclure qt5compat pour Qt6
          # Ce module est nécessaire pour Core5Compat
          if "qt5compat" in mods:
              wanted.append("qt5compat")
          else:
              # Si qt5compat n'est pas dans la liste, l'ajouter quand même
              # car il peut être disponible même s'il n'apparaît pas dans list-qt
              print("Warning: qt5compat not found in module list, adding it anyway", file=sys.stderr)
              wanted.append("qt5compat")

          # Ajouter d'autres modules communs si disponibles
          for mod in ["qtcharts", "qtnetworkauth", "qtwebsockets"]:
              if mod in mods:
                  wanted.append(mod)

          modules_str = ' '.join(wanted)
          github_output = os.environ["GITHUB_OUTPUT"]
          with open(github_output, "a") as f:
              f.write(f"modules={modules_str}\n")
          print(f"Selected modules: {modules_str or '(none)'}")
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VER }}
          target: desktop
          host:   ${{ matrix.host }}
          arch:   ${{ matrix.arch }}
          modules: ${{ steps.detect.outputs.modules }}
          cache: true
      - name: Debug Qt Installation (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "QTDIR=$QTDIR"
          echo "Qt6_DIR=$Qt6_DIR"
          which qmake || true
          qmake -v || true
          echo "--- Checking for Core5Compat ---"
          if [ -d "$Qt6_DIR/../Qt6Core5Compat" ]; then
            echo "Qt6Core5Compat directory found"
            ls -la "$Qt6_DIR/../Qt6Core5Compat" || true
          else
            echo "Qt6Core5Compat directory NOT found"
            echo "Listing Qt6 cmake directories:"
            ls -la "$Qt6_DIR/.." | grep Qt6 || true
          fi
        shell: bash
      - name: Debug Qt Installation (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "QTDIR=$env:QTDIR"
          echo "Qt6_DIR=$env:Qt6_DIR"
          where.exe qmake 2>$null || echo "qmake not in PATH"
          qmake -v
          echo "--- Checking for Core5Compat ---"
          $qt6Core5CompatPath = Join-Path (Split-Path $env:Qt6_DIR) "Qt6Core5Compat"
          if (Test-Path $qt6Core5CompatPath) {
            echo "Qt6Core5Compat directory found at $qt6Core5CompatPath"
            Get-ChildItem $qt6Core5CompatPath
          } else {
            echo "Qt6Core5Compat directory NOT found"
            echo "Listing Qt6 cmake directories:"
            Get-ChildItem (Split-Path $env:Qt6_DIR) -Filter "Qt6*" | Select-Object Name
          }
        shell: pwsh
      - name: Configure (CMake + Ninja)
        run: cmake -S Blockchain_desktop_PDG -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --parallel
      - name: CTest
        run: ctest --test-dir ${{ env.BUILD_DIR }} --output-on-failure
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ runner.os }}
          path: |
            ${{ env.BUILD_DIR }}/appBlockchain_desktop_PDG
            ${{ env.BUILD_DIR }}/appBlockchain_desktop_PDG.exe
            ${{ env.BUILD_DIR }}/appBlockchain_desktop_PDG.app
          if-no-files-found: ignore
